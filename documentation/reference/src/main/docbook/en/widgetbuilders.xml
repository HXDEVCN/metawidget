<?xml version="1.0" encoding="UTF-8"?>
	<chapter id="chapter-widgetbuilders">
		<title>WidgetBuilders</title>
		
		<para>
			This chapter covers each <classname>WidgetBuilder</classname> in detail. For an explanation of how WidgetBuilders
			fit into the overall architecture of Metawidget, see <xref linkend="chapter-architecture"/>
		</para>

		<para>
			Throughout this chapter when we refer to 'Metawidget Attributes' we mean the intermediate
			XML that Metawidget passes between <classname>Inspector</classname>s and other parts of the architecture.
			Quite which <classname>Inspector</classname> set the attribute, and based on what, is covered in <xref linkend="chapter-inspectors"/>.
			For example, the <parameter>maximum-value</parameter> attribute could be set by <classname>HibernateValidatorInspector</classname>
			based on the <classname>@Max</classname> annotation, or by <classname>CommonsValidatorInspector</classname> based on
			an <parameter>intRange</parameter> element in an XML file, or some other source.
		</para>
		
		<section id="section-widgetbuilders-desktop">
			<title>Desktop WidgetBuilders</title>
			
			<para>
				Metawidget supports multiple <classname>WidgetBuilder</classname>s for each desktop framework, targeting
				specific widget libraries within each environment.
			</para>
			
			<section id="section-widgetbuilders-swing">
				<title>Swing WidgetBuilders</title>
				
				<section id="section-widgetbuilders-swing-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>JComponent</classname>s whose <function>getName</function> equals the same name Metawidget
						would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-swing-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>javax.swing</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>JLabel</classname></td>
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter> or <parameter>masked</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JPanel</classname></td>
								<td><parameter>read-only</parameter> and <parameter>masked</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.swing</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>

				<section id="section-widgetbuilders-swing-default">
					<title>SwingWidgetBuilder</title>
					
					<para>
						<classname>SwingWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname> for
						<classname>SwingMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>javax.swing</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>JButton</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JCheckBox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JComboBox</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JPasswordField</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JSlider</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JSpinner</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has only
								one, or neither <parameter>minimum-value</parameter> and <parameter>maximum-value</parameter>.
								For floats and doubles, the step size is governed by <parameter>maximum-fractional-digits</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JTable</classname></td>
								<td><parameter>type="java.util.Collection"</parameter>. The <classname>JTable</classname> is
								automatically wrapped in a <classname>JScrollPane</classname></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JTextArea</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter>. The <classname>JTextArea</classname> is
								automatically wrapped in a <classname>JScrollPane</classname></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>JTextField</classname></td>
								<td><parameter>type</parameter> is a <classname>java.lang.String</classname>,
								<classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.swing</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>hidden</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>			
		
				<section id="section-widgetbuilders-swing-swingx">
					<title>SwingXWidgetBuilder</title>
					
					<para>
						<classname>SwingXWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname> for the SwingX library. It is intended
						to be used in conjunction with the default <classname>SwingWidgetBuilder</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.jdesktop.swingx</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>JXDatePicker</classname></td>
								<td><parameter>type="java.util.Date"</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>
			</section>

			<section id="section-widgetbuilders-swt">
				<title>SWT WidgetBuilders</title>
				
				<section id="section-widgetbuilders-swt-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>Control</classname>s whose <function>getData("name")</function> equals the same name Metawidget
						would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-swt-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.eclipse.swt.widgets</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>Label</classname></td>
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter> or <parameter>masked</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Composite</classname></td>
								<td><parameter>read-only</parameter> and <parameter>masked</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.swt</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>

				</section>

				<section id="section-widgetbuilders-swt-default">
					<title>SwtWidgetBuilder</title>
					
					<para>
						<classname>SwtWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>SwtMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.eclipse.swt.widgets</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>Button</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Button( SWT.CHECK )</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Combo</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Text( SWT.MASKED )</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Scale</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Spinner</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has only
								one, or neither <parameter>minimum-value</parameter> and <parameter>maximum-value</parameter>.
								For floats and doubles, the increment is governed by <parameter>maximum-fractional-digits</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Text( SWT.MULTI )</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Text</classname></td>
								<td><parameter>type</parameter> is a <classname>java.lang.String</classname>,
								<classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.swt</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>hidden</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>
			</section>
		</section>

		<section id="section-widgetbuilders-web">
			<title>Web WidgetBuilders</title>
	
			<para>
				Metawidget supports multiple <classname>WidgetBuilder</classname>s for each Web framework, targeting
				specific widget libraries within each environment.
			</para>
			
			<section id="section-widgetbuilders-gwt">
				<title>GWT WidgetBuilders</title>
			
				<section id="section-widgetbuilders-gwt-extgwt">
					<title>ExtGwtWidgetBuilder</title>
					
					<para>
						<classname>ExtGwtWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname> for the ExtGWT library. It is intended
						to be used in conjunction with the default <classname>GwtWidgetBuilder</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.extjs.gxt.ui.client.widget.form</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>DateField</classname></td>
								<td><parameter>type="java.util.Date"</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Slider</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>

				<section id="section-widgetbuilders-gwt-default">
					<title>GwtWidgetBuilder</title>
					
					<para>
						<classname>GwtWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>GwtMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.google.gwt.user.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>Button</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>CheckBox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>ListBox</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>PasswordTextBox</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>TextArea</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>TextBox</classname></td>
								<td><parameter>type</parameter> of <classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.gwt.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>hidden</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>			
			
				<section id="section-widgetbuilders-gwt-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						widgets that implement <classname>HasName</classname> and whose <function>getName</function> equals the same name
						Metawidget would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-gwt-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.google.gwt.user.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>Label</classname></td>
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter> or <parameter>masked</parameter>)</td>								
							</tr>
							<tr>
								<td></td>
								<td><classname>SimplePanel</classname></td>
								<td><parameter>read-only</parameter> and <parameter>masked</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.gwt.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>

				</section>

			</section>
	
			<section id="section-widgetbuilders-javascript">
				<title>JavaScript WidgetBuilders</title>

				<section id="section-widgetbuilders-javascript-default">
					<title>HtmlWidgetBuilder</title>
					
					<para>
						<classname>HtmlWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname> for
						<filename>metawidget.js</filename>. It returns the following DOM nodes
						for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="40%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left">DOM Node</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td><classname>&lt;input type="button"&gt;</classname></td>
								<td><parameter>type: "function"</parameter></td>
							</tr>
							<tr>
								<td><classname>&lt;input type="submit"&gt;</classname></td>
								<td><parameter>type: "function"</parameter> and <parameter>submit: true</parameter></td>
							</tr>
							<tr>
								<td><classname>&lt;input type="checkbox"&gt;</classname></td>
								<td><parameter>type: "boolean"</parameter></td>
							</tr>				
							<tr>
								<td><classname>&lt;input type="date"&gt;</classname></td>
								<td><parameter>type: "date"</parameter></td>
							</tr>				
							<tr>
								<td><classname>&lt;input type="number"&gt;</classname></td>
								<td><parameter>type: "number"</parameter> or <parameter>type: "integer"</parameter></td>
							</tr>				
							<tr>
								<td><classname>&lt;input type="password"&gt;</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td><classname>&lt;input type="range"&gt;</classname></td>
								<td>
									<parameter>type: "number"</parameter> and both
									<parameter>minimum</parameter> and <parameter>maximum</parameter>
									are set
								</td>
							</tr>				
							<tr>
								<td><classname>&lt;input type="text"&gt;</classname></td>
								<td>
									<parameter>type: "string"</parameter>.
									Also if property is of unknown type but <parameter>dontExpand</parameter>.
									If <parameter>maxLength</parameter>, adds <parameter>maxlength="..."</parameter>
								</td>							
							</tr>
							<tr>
								<td><classname>&lt;select&gt;</classname></td>
								<td><parameter>enum</parameter></td>
							</tr>					
							<tr>
								<td><classname>&lt;stub&gt;</classname></td>
								<td><parameter>hidden</parameter></td>
							</tr>
							<tr>
								<td><classname>&lt;table&gt;</classname></td>
								<td>
									<parameter>type: "array"</parameter>. Child properties will be inspected to determine
									table columns. Also supports <parameter>columnWidth</parameter> metadata</td>.
							</tr>
							<tr>
								<td><classname>&lt;textarea&gt;</classname></td>
								<td><parameter>type: "string"</parameter> and <parameter>large</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>				
	
				<section id="section-widgetbuilders-javascript-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						based on the <parameter>id</parameter> of the DOM node. It does not match on <parameter>name</parameter>, because
						<parameter>name</parameter> is not a legal attribute for many nodes (e.g. <parameter>table</parameter>).
					</para>
				</section>

				<section id="section-widgetbuilders-javascript-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the following
						DOM nodes for the following Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="40%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left">DOM Node</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td><classname>output</classname></td>
								<td>
									<parameter>read-only</parameter> and <parameter>enum</parameter>,
									<parameter>type: "string"</parameter>,
									<parameter>type: "boolean"</parameter>,
									<parameter>type: "number"</parameter> or
									<parameter>type: "date"</parameter>. Also <parameter>masked</parameter>
									(but the populated data will be filled with '*' characters).
								</td>
							</tr>
							<tr>
								<td><classname>stub</classname></td>
								<td>
									<parameter>read-only</parameter> and
									<parameter>hidden</parameter> or <parameter>type: "function"</parameter>.
									Also if property is of unknown type but <parameter>dontExpand</parameter>.
								</td>
							</tr>
						</tbody>
					</informaltable>
				</section>
			</section>

			<section id="section-widgetbuilders-jsp">
				<title>JSP WidgetBuilders</title>

				<section id="section-widgetbuilders-jsp-displaytag">
					<title>DisplayTagWidgetBuilder</title>
					
					<para>
						<classname>DisplayTagWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname> for the DisplayTag library. It is intended
						to be used in conjunction with the JSP <classname>HtmlWidgetBuilder</classname>, <classname>SpringWidgetBuilder</classname>
						or <classname>StrutsWidgetBuilder</classname>. It instantiates the following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Type of field</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.displaytag.tags</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>TableTag</classname></td>
								<td>
									<parameter>type="java.util.Collection"</parameter> or
									an array, except when also <parameter>hidden</parameter> or
									<parameter>lookup</parameter>. The
									columns in the table are based on inspecting
									<parameter>parameterized-type</parameter> or the
									component type of the array. If neither can be determined,
									the table will only have a single column
								</td>
							</tr>
						</tbody>
					</informaltable>
				</section>
				
				<section id="section-widgetbuilders-jsp-default">
					<title>HtmlWidgetBuilder</title>
					
					<para>
						<classname>HtmlWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname> for the JSP HtmlMetawidgetTag. Since JSP has
						only a light component model (i.e. HTML tags such as <parameter>&lt;input&gt;</parameter> and
						<parameter>&lt;select&gt;</parameter> are just
						strings, not modelled as JSP tags), <classname>HtmlWidgetBuilder</classname> uses
						<classname>org.metawidget.jsp.tagext.LiteralTag</classname>
						to wrap string-based fragments. It returns the following literals for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td></td>
								<td><classname>&lt;input type="checkbox"&gt;</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>				
							<tr>
								<td></td>
								<td><classname>&lt;input type="password"&gt;</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>&lt;input type="submit"&gt;</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>&lt;input type="text"&gt;</classname></td>
								<td><parameter>type</parameter> is a <classname>java.lang.String</classname>,
								<classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If specified, adds <parameter>maximum-length</parameter>,
								<parameter>minimum-value</parameter>,
								<parameter>maximum-value</parameter>
								and <parameter>required</parameter></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>&lt;select&gt;</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>					
							<tr>
								<td></td>
								<td><classname>&lt;textarea&gt;</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.jsp.tagext</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>StubTag</classname></td>
								<td><parameter>hidden</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>				
	
				<section id="section-widgetbuilders-jsp-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>StubTag</classname>s whose <parameter>value</parameter> (<parameter>path</parameter> for Spring
						environments; <parameter>property</parameter> for Struts environments) equals the same value Metawidget
						would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-jsp-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. The base class manages 'pure' JSP, with
						subclasses for both Spring and Struts environments. It instantiates the following widgets for the following
						Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.jsp.tagext</classname></th>
							</tr>
							<tr>
								<td></td>
								<td>(raw text)</td>								
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter> or
								<parameter>masked</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>LiteralTag</classname></td>
								<td><parameter>read-only</parameter> and <parameter>masked</parameter></td>
							</tr>
							<tr>
								<td></td>					
								<td><classname>StubTag</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>

				<section id="section-widgetbuilders-jsp-spring">
					<title>SpringWidgetBuilder</title>
					
					<para>
						<classname>SpringWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>SpringMetawidgetTag</classname>. It
						returns the following widgets for the following Metawidget attributes:
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.springframework.web.servlet.tags.form</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>CheckboxTag</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>InputTag</classname></td>
								<td><parameter>type</parameter> is a <classname>java.lang.String</classname>,
								<classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>PasswordInputTag</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>SelectTag</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>					
							<tr>
								<td></td>
								<td><classname>TextareaTag</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.jsp.tagext</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>StubTag</classname></td>
								<td><parameter>action</parameter> when not <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>	
		
				<section id="section-widgetbuilders-jsp-struts">
					<title>StrutsWidgetBuilder</title>
					
					<para>
						<classname>StrutsWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>StrutsMetawidgetTag</classname>. It
						returns the following widgets for the following Metawidget attributes:
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.apache.struts.taglib.html</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>CheckboxTag</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>SelectTag</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>PasswordTag</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>TextTag</classname></td>
								<td><parameter>type</parameter> of <classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>TextareaTag</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.jsp.tagext</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>StubTag</classname></td>
								<td><parameter>action</parameter> when not <parameter>read-only</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>	

			</section>
			
			<section id="section-widgetbuilders-faces">
				<title>JSF WidgetBuilders</title>
				
				<section id="section-widgetbuilders-faces-default">
					<title>HtmlWidgetBuilder</title>
					
					<para>
						<classname>HtmlWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for the JSF <classname>HtmlMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>javax.faces.component.html</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlCommandButton</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlDataTable</classname></td>
								<td>
									<parameter>type</parameter> of List, DataModel or
									array, except when also <parameter>hidden</parameter> or
									<parameter>lookup</parameter>. The
									columns in the table are based on inspecting
									<parameter>parameterized-type</parameter> or the
									component type of the array (if neither can be determined,
									the table will only have a single column). An additional
									<parameter>dataTableRowAction</parameter>
									facet can be used to add an 'action' column (for viewing or editing) - see
									<xref linkend="section-introduction-part3-icefaces"/>
								</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputSecret</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputText</classname></td>
								<td><parameter>type</parameter> of <classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputTextarea</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlSelectBooleanCheckbox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlSelectManyCheckbox</classname></td>
								<td><parameter>type</parameter> of List or array, with <parameter>lookup</parameter></td>
							</tr>					
							<tr>
								<td></td>
								<td><classname>HtmlSelectOneMenu</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>					
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.faces.component</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>UIStub</classname></td>
								<td><parameter>hidden</parameter></td>								
							</tr>
						</tbody>
					</informaltable>
					
				</section>
	
				<section id="section-widgetbuilders-icefaces">
					<title>IceFacesWidgetBuilder</title>
					
					<para>
						<classname>IceFacesWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname> for
						the JSF <classname>UIMetawidget</classname>. It is intended
						to be used in conjunction with the default JSF <classname>HtmlWidgetBuilder</classname>. For an
						example, see <xref linkend="section-introduction-part3-icefaces"/>.
						<classname>IceFacesWidgetBuilder</classname> instantiates the following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.icesoft.faces.component.ext</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlCommandButton</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputSecret</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputText</classname></td>
								<td><parameter>type</parameter> of <classname>java.util.Date</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputTextarea</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlSelectBooleanCheckbox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlSelectManyCheckbox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>					
							<tr>
								<td></td>
								<td><classname>HtmlSelectOneMenu</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>					
							<tr>
								<th align="left" colspan="3"><classname>com.icesoft.faces.component</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>SelectInputDate</classname></td>
								<td>
									<parameter>type="java.util.Date"</parameter>
									<para>
										<emphasis>
											Important: see <xref linkend="section-architecture-widgetbuilders-implementing-your-own-faces"/>
										</emphasis>
									</para>
								</td>
							</tr>
						</tbody>
					</informaltable>
					
					<para>
						By default, all components are instantiated with <parameter>partialSubmit</parameter> set to true. This can
						be configured through <classname>IceFacesWidgetBuilderConfig</classname>.
					</para>
		
				</section>			
		
				<section id="section-widgetbuilders-faces-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>UIComponent</classname>s whose <parameter>value</parameter> binding or <parameter>action</parameter> binding
						equals the same binding Metawidget would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-faces-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>javax.faces.component.html</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlOutputText</classname></td>
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter> or <parameter>masked</parameter>)</td>								
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.faces.component</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>HtmlLookupOutputText</classname></td>
								<td><parameter>read-only</parameter> with <parameter>lookup-label</parameter></td>
							</tr>
							<tr>
								<td></td>					
								<td><classname>UIStub</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>masked</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>								
							</tr>
						</tbody>
					</informaltable>
					
				</section>

				<section id="section-widgetbuilders-primefaces">
					<title>PrimeFacesWidgetBuilder</title>
					
					<para>
						<classname>PrimeFacesWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname>
						for the JSF <classname>UIMetawidget</classname>. It is intended
						to be used in conjunction with the default JSF <classname>HtmlWidgetBuilder</classname>.
						<classname>PrimeFacesWidgetBuilder</classname> instantiates the following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.primefaces.component</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>AutoComplete</classname></td>
								<td><parameter>faces-suggest</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Calendar</classname></td>
								<td><parameter>type="java.util.Date"</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>ColorPicker</classname></td>
								<td><classname><parameter>type="java.awt.Color"</parameter></classname></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Stub</classname> containing an <classname>InputText</classname> and a <classname>Slider</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Spinner</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) or
								a <classname>Number</classname> and has only
								one, or neither <parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>

				<section id="section-widgetbuilders-richfaces">
					<title>RichFacesWidgetBuilder</title>
					
					<para>
						<classname>RichFacesWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname>
						for the JSF <classname>UIMetawidget</classname>. It is intended
						to be used in conjunction with the default JSF <classname>HtmlWidgetBuilder</classname>. For an example, see <xref linkend="section-introduction-part2-web-richfaces"/>.
						<classname>RichFacesWidgetBuilder</classname> instantiates the following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.richfaces.component.html</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlCalendar</classname></td>
								<td><parameter>type="java.util.Date"</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlColorPicker</classname></td>
								<td><classname><parameter>type="java.awt.Color"</parameter></classname></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputNumberSlider</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputNumberSpinner</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) or
								a <classname>Number</classname> and has only
								one, or neither <parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlSuggestionBox</classname></td>
								<td><parameter>faces-suggest</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>

				<section id="section-widgetbuilders-tomahawk">
					<title>TomahawkWidgetBuilder</title>
					
					<para>
						<classname>TomahawkWidgetBuilder</classname> is a pluggable <classname>WidgetBuilder</classname>
						for the JSF <classname>UIMetawidget</classname>. It is intended
						to be used in conjunction with the default JSF <classname>HtmlWidgetBuilder</classname>.
						<classname>TomahawkWidgetBuilder</classname> instantiates the following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>org.apache.myfaces.custom</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>HtmlInputFileUpload</classname></td>
								<td><parameter>type="org.apache.myfaces.custom.fileupload.UploadedFile"</parameter></td>
							</tr>
						</tbody>
					</informaltable>
				</section>	

			</section>

			<section id="section-widgetbuilders-vaadin">
				<title>Vaadin WidgetBuilders</title>
				
				<section id="section-widgetbuilders-vaadin-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>Component</classname>s whose <function>getData</function> equals the name of the business property.
					</para>
				</section>

				<section id="section-widgetbuilders-vaadin-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.vaadin.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Button</classname> (disabled)</td>
								<td><parameter>read-only</parameter> and <parameter>action</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Label</classname></td>
								<td><parameter>read-only</parameter> (except when <parameter>action</parameter>, <parameter>masked</parameter> or <parameter>large</parameter>)</td>								
							</tr>
							<tr>
								<td></td>					
								<td><classname>Panel</classname></td>
								<td><parameter>read-only</parameter> and <parameter>masked</parameter></td>
							</tr>
							<tr>
								<td></td>					
								<td><classname>TextArea</classname> (disabled)</td>
								<td><parameter>read-only</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.vaadin.ui.widgetbuilder</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>LookupLabel</classname></td>
								<td><parameter>read-only</parameter> with <parameter>lookup-label</parameter></td>
							</tr>
						</tbody>
					</informaltable>
					
				</section>

				<section id="section-widgetbuilders-vaadin-default">
					<title>VaadinWidgetBuilder</title>
					
					<para>
						<classname>VaadinWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>VaadinMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>com.vaadin.ui</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>Button</classname></td>
								<td><parameter>action</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>CheckBox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>ComboBox</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>PasswordField</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>PopupDateField</classname></td>
								<td><parameter>type</parameter> of <classname>java.util.Date</classname></td>								 
							</tr>
							<tr>
								<td></td>
								<td><classname>Slider</classname></td>
								<td><parameter>type</parameter> is a primitive (except boolean and char) and has both
								<parameter>minimum-value</parameter> and <parameter>maximum-value</parameter></td>
							</tr>							
							<tr>
								<td></td>
								<td><classname>TextArea</classname></td>
								<td><parameter>type="java.lang.String"</parameter> and <parameter>large</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>TextField</classname></td>
								<td><parameter>type</parameter> of <classname>java.lang.String</classname>,								 
								primitive wrapper (e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>maximum-length</parameter>, calls <function>setMaxlength</function></td>							
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.vaadin.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>hidden</parameter></td>								
							</tr>
						</tbody>
					</informaltable>
					
				</section>

			</section>

		</section>	

		<section id="section-widgetbuilders-mobile">
			<title>Mobile WidgetBuilders</title>

			<para>
				Metawidget supports multiple <classname>WidgetBuilder</classname>s for each mobile framework, targeting
				specific widget libraries within each environment.
			</para>
			
			<section id="section-widgetbuilders-android">
				<title>Android WidgetBuilders</title>

				<section id="section-widgetbuilders-android-default">
					<title>AndroidWidgetBuilder</title>
					
					<para>
						<classname>AndroidWidgetBuilder</classname> is the default <classname>WidgetBuilder</classname>
						for <classname>AndroidMetawidget</classname>. It instantiates the
						following widgets for the following Metawidget attributes: 
					</para>
					
					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>android.widget</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>CheckBox</classname></td>
								<td>
									<parameter>type="boolean"</parameter> (and
									<parameter>type="java.lang.Boolean"</parameter>
									when also <parameter>required</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>DatePicker</classname></td>
								<td><parameter>type="java.utils.Date"</parameter> when also <parameter>required</parameter></td>
							</tr>
							<tr>
								<td></td>
								<td><classname>EditText</classname></td>
								<td><parameter>type</parameter> of primitive wrapper
								(e.g. <classname>Integer</classname> or <classname>Float</classname>)
								except <classname>java.lang.Boolean</classname>.
								Also if property is of unknown type but <parameter>dont-expand</parameter>.
								If <parameter>large</parameter>, calls <function>setMinLines</function>.
								If <parameter>masked</parameter>, sets a <classname>PasswordTransformationMethod</classname>.
								If numeric, sets a <classname>DigitsKeyListener</classname>.
								If <parameter>maximum-length</parameter>, sets a <classname>InputFilter.LengthFilter</classname>.
								If <parameter>type</parameter> is a Date, sets a <classname>DateKeyListener</classname></td>							
							</tr>
							<tr>
								<td></td>
								<td><classname>PasswordTextBox</classname></td>
								<td><parameter>masked</parameter> (except when also <parameter>read-only</parameter>)</td>
							</tr>
							<tr>
								<td></td>
								<td><classname>Spinner</classname></td>
								<td><parameter>lookup</parameter></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.gwt.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>hidden</parameter></td>								
							</tr>
						</tbody>
					</informaltable>
					
				</section>

				<section id="section-widgetbuilders-android-overridden">
					<title>OverriddenWidgetBuilder</title>
					
					<para>
						<classname>OverriddenWidgetBuilder</classname> locates child widgets designed to override default generation. It matches
						<classname>View</classname>s whose <parameter>tag</parameter> equals the same tag Metawidget would have generated.  
					</para>
				</section>

				<section id="section-widgetbuilders-android-readonly">
					<title>ReadOnlyWidgetBuilder</title>
					
					<para>
						<classname>ReadOnlyWidgetBuilder</classname> returns read-only widgets when either the business property is
						read-only or the Metawidget has <function>setReadOnly</function>. It instantiates the
						following widgets for the following Metawidget attributes:
					</para>

					<informaltable>
						<colgroup>
							<col width="5%"/>
							<col width="35%"/>
							<col width="60%"/>
						</colgroup>
						<thead>
							<tr>
								<th align="left" colspan="2">Widget</th>
								<th align="left">Metawidget Attribute</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th align="left" colspan="3"><classname>android.widget</classname></th>
							</tr>
							<tr>
								<td></td>
								<td><classname>TextView</classname></td>
								<td><parameter>read-only</parameter> (except when also <parameter>type="java.util.Collection"</parameter>).
								If <parameter>masked</parameter> sets <classname>View.INVISIBLE</classname></td>
							</tr>
							<tr>
								<th align="left" colspan="3"><classname>org.metawidget.gwt.client.ui</classname></th>
							</tr>
							<tr>
								<td></td>					
								<td><classname>Stub</classname></td>
								<td><parameter>action</parameter> when also <parameter>read-only</parameter>,
								<parameter>masked</parameter> when also <parameter>read-only</parameter>,
								<parameter>type="java.util.Collection"</parameter> when also <parameter>read-only</parameter></td>								
							</tr>
						</tbody>
					</informaltable>
				</section>

			</section>
		</section>
					
	</chapter>
